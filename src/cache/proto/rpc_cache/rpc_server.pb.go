// Code generated by protoc-gen-go. DO NOT EDIT.
// source: forked/cache/proto/rpc_server.proto

package proto_rpc_cache

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JoinRequest struct {
	// Identifier of the machine.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Address & port of the machine.
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinRequest) Reset()         { *m = JoinRequest{} }
func (m *JoinRequest) String() string { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()    {}
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1655271e1bda646, []int{0}
}

func (m *JoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinRequest.Unmarshal(m, b)
}
func (m *JoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinRequest.Marshal(b, m, deterministic)
}
func (m *JoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequest.Merge(m, src)
}
func (m *JoinRequest) XXX_Size() int {
	return xxx_messageInfo_JoinRequest.Size(m)
}
func (m *JoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequest proto.InternalMessageInfo

func (m *JoinRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JoinRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type JoinResponse struct {
	// True if the caller is allowed to join the cluster.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The node corresponding to the requestor. Will also appear in `nodes`.
	Node *Node `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// List of other known nodes.
	Nodes []*Node `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Expected size of the cluster.
	Size                 int32    `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinResponse) Reset()         { *m = JoinResponse{} }
func (m *JoinResponse) String() string { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()    {}
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1655271e1bda646, []int{1}
}

func (m *JoinResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinResponse.Unmarshal(m, b)
}
func (m *JoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinResponse.Marshal(b, m, deterministic)
}
func (m *JoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinResponse.Merge(m, src)
}
func (m *JoinResponse) XXX_Size() int {
	return xxx_messageInfo_JoinResponse.Size(m)
}
func (m *JoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinResponse proto.InternalMessageInfo

func (m *JoinResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *JoinResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *JoinResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *JoinResponse) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ReplicateRequest struct {
	// Sequence of artifacts to store.
	Artifacts []*Artifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// OS of requestor
	Os string `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	// Architecture of requestor
	Arch string `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	// Hash of rule that generated these artifacts
	Hash []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	// True to delete the artifact
	Delete bool `protobuf:"varint,5,opt,name=delete,proto3" json:"delete,omitempty"`
	// Hostname of the original sender who stored this
	Hostname string `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Hostname of the peer sending this request
	Peer                 string   `protobuf:"bytes,7,opt,name=peer,proto3" json:"peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicateRequest) Reset()         { *m = ReplicateRequest{} }
func (m *ReplicateRequest) String() string { return proto.CompactTextString(m) }
func (*ReplicateRequest) ProtoMessage()    {}
func (*ReplicateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1655271e1bda646, []int{2}
}

func (m *ReplicateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicateRequest.Unmarshal(m, b)
}
func (m *ReplicateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicateRequest.Marshal(b, m, deterministic)
}
func (m *ReplicateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicateRequest.Merge(m, src)
}
func (m *ReplicateRequest) XXX_Size() int {
	return xxx_messageInfo_ReplicateRequest.Size(m)
}
func (m *ReplicateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicateRequest proto.InternalMessageInfo

func (m *ReplicateRequest) GetArtifacts() []*Artifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

func (m *ReplicateRequest) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *ReplicateRequest) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *ReplicateRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ReplicateRequest) GetDelete() bool {
	if m != nil {
		return m.Delete
	}
	return false
}

func (m *ReplicateRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ReplicateRequest) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

type ReplicateResponse struct {
	// True if store was successful.
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicateResponse) Reset()         { *m = ReplicateResponse{} }
func (m *ReplicateResponse) String() string { return proto.CompactTextString(m) }
func (*ReplicateResponse) ProtoMessage()    {}
func (*ReplicateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1655271e1bda646, []int{3}
}

func (m *ReplicateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicateResponse.Unmarshal(m, b)
}
func (m *ReplicateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicateResponse.Marshal(b, m, deterministic)
}
func (m *ReplicateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicateResponse.Merge(m, src)
}
func (m *ReplicateResponse) XXX_Size() int {
	return xxx_messageInfo_ReplicateResponse.Size(m)
}
func (m *ReplicateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicateResponse proto.InternalMessageInfo

func (m *ReplicateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*JoinRequest)(nil), "proto.rpc_cache.JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "proto.rpc_cache.JoinResponse")
	proto.RegisterType((*ReplicateRequest)(nil), "proto.rpc_cache.ReplicateRequest")
	proto.RegisterType((*ReplicateResponse)(nil), "proto.rpc_cache.ReplicateResponse")
}

func init() {
	proto.RegisterFile("forked/cache/proto/rpc_server.proto", fileDescriptor_f1655271e1bda646)
}

var fileDescriptor_f1655271e1bda646 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x95, 0x36, 0x4d, 0x9b, 0x69, 0xc5, 0x1f, 0x4b, 0x20, 0x13, 0x81, 0x48, 0xc3, 0xa5,
	0x08, 0x91, 0x4a, 0xe5, 0xc0, 0x81, 0x13, 0x70, 0xe3, 0xc0, 0xc1, 0x3c, 0x00, 0x32, 0xce, 0x14,
	0x47, 0xb4, 0x71, 0xb0, 0x5d, 0x0e, 0x3c, 0xc7, 0x3e, 0xc2, 0xbe, 0xcd, 0xbe, 0xd4, 0xca, 0x93,
	0xa6, 0x5b, 0xb5, 0xea, 0xee, 0xc9, 0x33, 0x93, 0xdf, 0x7c, 0x9e, 0xf9, 0x1c, 0x78, 0xb3, 0x36,
	0xf6, 0x0f, 0x56, 0x4b, 0x25, 0x95, 0xc6, 0x65, 0x6b, 0x8d, 0x37, 0x4b, 0xdb, 0xaa, 0x9f, 0x0e,
	0xed, 0x3f, 0xb4, 0x25, 0x15, 0xd8, 0x63, 0x3a, 0xca, 0x50, 0x27, 0x2e, 0x2b, 0x2e, 0x74, 0x51,
	0xde, 0x35, 0x15, 0x9f, 0x60, 0xfa, 0xcd, 0xd4, 0x8d, 0xc0, 0xbf, 0x3b, 0x74, 0x9e, 0x31, 0x88,
	0x1b, 0xb9, 0x45, 0x1e, 0xe5, 0xd1, 0x22, 0x15, 0x14, 0x33, 0x0e, 0x63, 0x59, 0x55, 0x16, 0x9d,
	0xe3, 0x03, 0x2a, 0xf7, 0x69, 0x71, 0x15, 0xc1, 0xac, 0xeb, 0x76, 0xad, 0x69, 0x1c, 0xa1, 0x6e,
	0xa7, 0x54, 0x40, 0x83, 0xc2, 0x44, 0xf4, 0x29, 0x7b, 0x0b, 0x71, 0x63, 0x2a, 0x24, 0x85, 0xe9,
	0xea, 0x59, 0x79, 0x32, 0x6b, 0xf9, 0xdd, 0x54, 0x28, 0x08, 0x61, 0xef, 0x60, 0x14, 0x4e, 0xc7,
	0x87, 0xf9, 0xf0, 0x32, 0xdb, 0x31, 0x61, 0x60, 0x57, 0xff, 0x47, 0x9e, 0xe4, 0xd1, 0x62, 0x24,
	0x28, 0x2e, 0x6e, 0x22, 0x78, 0x22, 0xb0, 0xdd, 0xd4, 0x4a, 0x7a, 0xec, 0x37, 0xfb, 0x08, 0xa9,
	0xb4, 0xbe, 0x5e, 0x4b, 0xe5, 0xc3, 0x70, 0x41, 0xf9, 0xc5, 0x99, 0xf2, 0xe7, 0x3d, 0x21, 0xee,
	0x58, 0xf6, 0x08, 0x06, 0xa6, 0xdf, 0x7c, 0x60, 0xe8, 0x46, 0x69, 0x95, 0xe6, 0xc3, 0xce, 0xa2,
	0x10, 0x87, 0x9a, 0x96, 0x4e, 0xf3, 0x38, 0x8f, 0x16, 0x33, 0x41, 0x31, 0x7b, 0x0e, 0x49, 0x85,
	0x1b, 0xf4, 0xc8, 0x47, 0x64, 0xc5, 0x3e, 0x63, 0x19, 0x4c, 0xb4, 0x71, 0x9e, 0x6c, 0x4e, 0x48,
	0xe3, 0x90, 0x07, 0x9d, 0x16, 0xd1, 0xf2, 0x71, 0xa7, 0x1d, 0xe2, 0xe2, 0x3d, 0x3c, 0x3d, 0x5a,
	0xe6, 0x21, 0xa3, 0x57, 0xd7, 0x11, 0xa4, 0xa2, 0x55, 0x3f, 0xe8, 0xcf, 0x60, 0x5f, 0x21, 0x0e,
	0x0f, 0xc4, 0x5e, 0x9e, 0xad, 0x7a, 0xf4, 0xea, 0xd9, 0xab, 0x0b, 0x5f, 0xf7, 0x97, 0x09, 0x48,
	0x0f, 0x13, 0xb0, 0xf9, 0x19, 0x7b, 0x6a, 0x75, 0x56, 0xdc, 0x87, 0x74, 0x9a, 0x5f, 0xe6, 0xf0,
	0xba, 0x41, 0x5f, 0x7a, 0x6d, 0x76, 0xbf, 0xb5, 0xdf, 0x4a, 0xa5, 0xeb, 0x06, 0xcb, 0x76, 0x83,
	0xd2, 0x61, 0x49, 0x4d, 0xbf, 0x12, 0x52, 0xf9, 0x70, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x49, 0x6b,
	0x73, 0x77, 0xfd, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcServerClient is the client API for RpcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcServerClient interface {
	// Requests to join the cluster. Response indicates whether the client
	// is allowed to join.
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Adds an artifact to this node which has already been added to another.
	// Used to mirror stored artifacts between replicas.
	Replicate(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*ReplicateResponse, error)
}

type rpcServerClient struct {
	cc *grpc.ClientConn
}

func NewRpcServerClient(cc *grpc.ClientConn) RpcServerClient {
	return &rpcServerClient{cc}
}

func (c *rpcServerClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc_cache.RpcServer/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServerClient) Replicate(ctx context.Context, in *ReplicateRequest, opts ...grpc.CallOption) (*ReplicateResponse, error) {
	out := new(ReplicateResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc_cache.RpcServer/Replicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServerServer is the server API for RpcServer service.
type RpcServerServer interface {
	// Requests to join the cluster. Response indicates whether the client
	// is allowed to join.
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// Adds an artifact to this node which has already been added to another.
	// Used to mirror stored artifacts between replicas.
	Replicate(context.Context, *ReplicateRequest) (*ReplicateResponse, error)
}

func RegisterRpcServerServer(s *grpc.Server, srv RpcServerServer) {
	s.RegisterService(&_RpcServer_serviceDesc, srv)
}

func _RpcServer_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServerServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc_cache.RpcServer/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServerServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcServer_Replicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServerServer).Replicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc_cache.RpcServer/Replicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServerServer).Replicate(ctx, req.(*ReplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rpc_cache.RpcServer",
	HandlerType: (*RpcServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _RpcServer_Join_Handler,
		},
		{
			MethodName: "Replicate",
			Handler:    _RpcServer_Replicate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forked/cache/proto/rpc_server.proto",
}
